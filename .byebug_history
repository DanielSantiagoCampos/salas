exit
n
reservation_params[:reserved_at].to_datetime + reservation_params[:range].to_i.send(:hours)
reservation_params[:reserved_at].to_datetime + reservation_params[:range].send(:hours)
reservation_params[:reserved_at].to_datetime
reservation_params[:reserved_at].to_date
reservation_params[:reserved_at]
c
exit
Reservation.joins(:tool).where("reservations.tool_id = 3").count
Reservation.joins(:tool).where("reservations.tool_id = 3")
Reservation.joins(:tool).where("reservations.tool_id == #{tool.id}").count
Reservation.joins(:tool).where("reservations.tool_id = #{tool.id}").count
Reservation.joins(:tool).where('reservations.tool_id = ?', tool.id).count
Reservation.joins(:tool).where('reservations.tool_id = ?', tool.id)
Reservation.joins(:tool).where('reservations.tool_id').count
Reservation.joins(:tool).where('reservations.tool_id')
Reservation.joins(:tool).where('reservations.tool_id = ? and reservation_date between ? and ?', tool.id, reservation_date, range_of_reserve)
Reservation.joins(:tool).where('tool_id = ? and reservation_date between ? and ?', tool.id, reservation_date, range_of_reserve)
range_of_reserve = reservation_date + range.send(:hours)
c
range_of_reserve = reservation_date + range.send(:hours)
range_of_reserve = reservation_date + range
reservation_date + range
tool.id
reservation_date
exit
user.update(user_params)
user = User.find(params[:id])
c
@user.save
c
@user.errors
@user.save
@user
bn
c
valid = (confirmation_password == user_data[:password]) || new_user.save
(confirmation_password == user_data[:password])
c
new_user.save
(confirmation_password == user_data[:password])
exit
(confirmation_password != user_data[:password])
confirmation_password
